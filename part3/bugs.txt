Christopher Donnelly
CS-GY-9163 Application Security
Bugs.txt

Crash 1 -

The first crash file generated by the fuzzer causes a crash because it moves the program counter in the `animate` function
out of bounds. This results in a segmentation fault as the program attempts to access memory it is not supposed to. In order to fix this bug, 
we implement a check called PC_INBOUNDS that checks that the program counter is within the bounds for every iteration of the while loop: 

    (program <= pc && pc < program + PROGRAM_SIZE - 3)
    
Here, the program size is 256 as defined in giftcard.c. 
If the pointer ever moves out of bounds, we will break out of the animition loop.

Crash 2 - 

The second crash file generated by the fuzzer casues a crash by placing an unknown operation, or opcode, into the animate program. There was no default
case for the switch statement in the `animate` function, so the program crashes when an unknown opcode is described in the giftcard program and read in. 
In order to fix this bug, we set a default case in the switch statement, 

    default:
            fprintf(stderr, "invalid opcode: %#02x \n", op);
            goto done; 

which will print an error message indicating the unknown opcode and then `goto` the end of the animate function.